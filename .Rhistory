# Load packages
library(tidyverse)
library(rvest)
library(xml2)
library(magrittr)
library(stringi)
data <- readRDS("muffinData.rds")
# Sort out non-muffin recipes, including cupcakes and English muffin recipes
flours <- "flour|Flour|muffin mix|cake mix|Cake Mix|baking mix|Baking Mix|quinoa|dough|panettone|meal"
data_muffins <- data[map_lgl(data,~any(str_detect(.x$ingredients$ingredient,flours)))]
data_muffins <- data_muffins[map_lgl(data_muffins,~!str_detect(.x$title,"[:print:]+[Ee]nglish[:print:]+|[Ee]nglish[:print:]+|[:print:]+[Ee]nglish|Crumpet|Crumpet|Yorkshire Pudding"))]
data_muffins <- data_muffins[!map_lgl(data_muffins,~str_detect(.x$title,"cake|Cake") & !str_detect(.x$title,"muffin|Muffin"))]
for (i in c(1:length(data_muffins))){
# Scale all ingredients to 12 muffins
data_muffins[[i]]$ingredients$value12 <-
data_muffins[[i]]$ingredients$value * (12 / data_muffins[[i]]$servingSize)
# Scale ingredients (as best possible) to teaspoons
data_muffins[[i]]$ingredients$value12Tsp <-
map_dbl(c(1:nrow(data_muffins[[i]]$ingredients)),~
case_when(
data_muffins[[i]]$ingredients$measure[.x] == "cup" ~ data_muffins[[i]]$ingredients$value12[.x] * 49,
data_muffins[[i]]$ingredients$measure[.x] == "tablespoon" ~ data_muffins[[i]]$ingredients$value12[.x] * 3,
data_muffins[[i]]$ingredients$measure[.x] == "teaspoon" ~ data_muffins[[i]]$ingredients$value12[.x],
data_muffins[[i]]$ingredients$measure[.x] %>% is.character() ~ data_muffins[[i]]$ingredients$value12[.x]
)
)
# Create a single rating score
data_muffins[[i]]$score <- list(
rating = sum(
map_dbl(c(1:5),~ data_muffins[[i]]$ratings$rank[.x] * data_muffins[[i]]$ratings$votes[.x])
) / sum(data_muffins[[i]]$ratings$votes),
# Create a value of number of votes
votes = sum(data_muffins[[i]]$ratings$votes)
)
# Stats for baking
data_muffins[[i]]$bakeMethod <- list(
temperature = data_muffins[[i]]$instructions %>% str_extract("[0-9]+[\\s]+degrees[\\s]+F") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract("[0-9]+") %>%
as.character() %>%
as.numeric()
)
}
# Create vector of ingredients
ingredientsVector <- map(data_muffins,~ .x$ingredients$ingredient) %>%
unlist() %>%
na.omit()
# Create index table to determine whether the plural or singular form of an ingredients
# should be used for standardization
ingredientPlurIndexTable <- ingredientsVector[str_detect(ingredientsVector,"s$")] %>%
unique() %>% {
tibble(
plural = .,
singular = str_sub(.,end = -2L)
)
} %>% {
mutate(.,
toCheck = map_chr(.$plural, ~
if_else(
length(ingredientsVector[ingredientsVector == .x]) > length(ingredientsVector[ingredientsVector == str_sub(.x, end = -2L)]),
str_sub(.x, end = -2L),
.x
)
) %>%
{str_c("^", ., "$")}
,
changeTo = map_chr(.$plural, ~
if_else(
length(ingredientsVector[ingredientsVector == .x]) > length(ingredientsVector[ingredientsVector == str_sub(.x, end = -2L)]),
.x,
str_sub(.x, end = -2L)
)
)
)
}
# Function for changing singular to plural and vice-versa
PlurChanger <- function(ingredient){
if(str_detect(ingredient,ingredientPlurIndexTable$toCheck) %>% any()){
return(ingredientPlurIndexTable[str_detect(ingredient,ingredientPlurIndexTable$toCheck),4] %>% extract2(1) %>% extract(1))
}else{
return(ingredient)
}
}
# standardize ingredient names
for (i in c(1:length(data_muffins))){
data_muffins[[i]]$ingredients$ingredient <- map_chr(data_muffins[[i]]$ingredients$ingredient,PlurChanger)
}
# Create flat ingredient tables for Tableau practice
ingredientsTable <- map(data_muffins,~ .x$ingredients %>%
mutate(title = .x$title)
) %>%
bind_rows()
# Sort out non-muffin recipes, including cupcakes and English muffin recipes
flours <- "flour|Flour|muffin mix|cake mix|Cake Mix|baking mix|Baking Mix|quinoa|dough|panettone|meal"
data_muffins <- data[map_lgl(data,~any(str_detect(.x$ingredients$ingredient,flours)))]
data_muffins <- data_muffins[map_lgl(data_muffins,~!str_detect(.x$title,"[:print:]+[Ee]nglish[:print:]+|[Ee]nglish[:print:]+|[:print:]+[Ee]nglish|Crumpet|Crumpet|Yorkshire Pudding"))]
data_muffins <- data_muffins[!map_lgl(data_muffins,~str_detect(.x$title,"cake|Cake") & !str_detect(.x$title,"muffin|Muffin"))]
for (i in c(1:length(data_muffins))){
for (i in c(1:length(data_muffins))){
# Scale all ingredients to 12 muffins
data_muffins[[i]]$ingredients$value12 <-
data_muffins[[i]]$ingredients$value * (12 / data_muffins[[i]]$servingSize)
# Scale ingredients (as best possible) to teaspoons
data_muffins[[i]]$ingredients$value12Tsp <-
map_dbl(c(1:nrow(data_muffins[[i]]$ingredients)),~
case_when(
data_muffins[[i]]$ingredients$measure[.x] == "cup" ~ data_muffins[[i]]$ingredients$value12[.x] * 49,
data_muffins[[i]]$ingredients$measure[.x] == "tablespoon" ~ data_muffins[[i]]$ingredients$value12[.x] * 3,
data_muffins[[i]]$ingredients$measure[.x] == "teaspoon" ~ data_muffins[[i]]$ingredients$value12[.x],
data_muffins[[i]]$ingredients$measure[.x] %>% is.character() ~ data_muffins[[i]]$ingredients$value12[.x]
)
)
# Create a single rating score
data_muffins[[i]]$score <- list(
rating = sum(
map_dbl(c(1:5),~ data_muffins[[i]]$ratings$rank[.x] * data_muffins[[i]]$ratings$votes[.x])
) / sum(data_muffins[[i]]$ratings$votes),
# Create a value of number of votes
votes = sum(data_muffins[[i]]$ratings$votes)
)
# Stats for baking
data_muffins[[i]]$bakeMethod <- list(
temperature = data_muffins[[i]]$instructions %>% str_extract("[0-9]+[\\s]+degrees[\\s]+F") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract("[0-9]+") %>%
as.character() %>%
as.numeric(),
bakeTime = data_muffins[[i]]$instructions %>% str_extract("[Bb]ake[^\\.]+[0-9\\-\\s]+[\\s]+minutes|[Bb]ake[^\\.][0-9]+[\\s]+to[\\s]+[0-9]+[\\s]+minutes") %>%
na.omit() %>%
{extract(.,length(.))}
)
}
data_muffins[[5]]
data_muffins <- data[map_lgl(data,~any(str_detect(.x$ingredients$ingredient,flours)))]
data_muffins <- data_muffins[map_lgl(data_muffins,~!str_detect(.x$title,"[:print:]+[Ee]nglish[:print:]+|[Ee]nglish[:print:]+|[:print:]+[Ee]nglish|Crumpet|Crumpet|Yorkshire Pudding"))]
data_muffins <- data_muffins[!map_lgl(data_muffins,~str_detect(.x$title,"cake|Cake") & !str_detect(.x$title,"muffin|Muffin"))]
for (i in c(1:length(data_muffins))){
# Scale all ingredients to 12 muffins
data_muffins[[i]]$ingredients$value12 <-
data_muffins[[i]]$ingredients$value * (12 / data_muffins[[i]]$servingSize)
# Scale ingredients (as best possible) to teaspoons
data_muffins[[i]]$ingredients$value12Tsp <-
map_dbl(c(1:nrow(data_muffins[[i]]$ingredients)),~
case_when(
data_muffins[[i]]$ingredients$measure[.x] == "cup" ~ data_muffins[[i]]$ingredients$value12[.x] * 49,
data_muffins[[i]]$ingredients$measure[.x] == "tablespoon" ~ data_muffins[[i]]$ingredients$value12[.x] * 3,
data_muffins[[i]]$ingredients$measure[.x] == "teaspoon" ~ data_muffins[[i]]$ingredients$value12[.x],
data_muffins[[i]]$ingredients$measure[.x] %>% is.character() ~ data_muffins[[i]]$ingredients$value12[.x]
)
)
# Create a single rating score
data_muffins[[i]]$score <- list(
rating = sum(
map_dbl(c(1:5),~ data_muffins[[i]]$ratings$rank[.x] * data_muffins[[i]]$ratings$votes[.x])
) / sum(data_muffins[[i]]$ratings$votes),
# Create a value of number of votes
votes = sum(data_muffins[[i]]$ratings$votes)
)
# Stats for baking
data_muffins[[i]]$bakeMethod <- list(
temperature = data_muffins[[i]]$instructions %>% str_extract("[0-9]+[\\s]+degrees[\\s]+F") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract("[0-9]+") %>%
as.character() %>%
as.numeric(),
bakeTime = data_muffins[[i]]$instructions %>% str_extract("[Bb]ake[^\\.]+[0-9\\-\\s]+[\\s]+minutes|[Bb]ake[^\\.][0-9]+[\\s]+to[\\s]+[0-9]+[\\s]+minutes") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract_all("[0-9]+\\s") %>%
str_trim()
)
}
data_muffins[[5]]
warnings()
data_muffins <- data[map_lgl(data,~any(str_detect(.x$ingredients$ingredient,flours)))]
data_muffins <- data_muffins[map_lgl(data_muffins,~!str_detect(.x$title,"[:print:]+[Ee]nglish[:print:]+|[Ee]nglish[:print:]+|[:print:]+[Ee]nglish|Crumpet|Crumpet|Yorkshire Pudding"))]
data_muffins <- data_muffins[!map_lgl(data_muffins,~str_detect(.x$title,"cake|Cake") & !str_detect(.x$title,"muffin|Muffin"))]
for (i in c(1:length(data_muffins))){
# Scale all ingredients to 12 muffins
data_muffins[[i]]$ingredients$value12 <-
data_muffins[[i]]$ingredients$value * (12 / data_muffins[[i]]$servingSize)
# Scale ingredients (as best possible) to teaspoons
data_muffins[[i]]$ingredients$value12Tsp <-
map_dbl(c(1:nrow(data_muffins[[i]]$ingredients)),~
case_when(
data_muffins[[i]]$ingredients$measure[.x] == "cup" ~ data_muffins[[i]]$ingredients$value12[.x] * 49,
data_muffins[[i]]$ingredients$measure[.x] == "tablespoon" ~ data_muffins[[i]]$ingredients$value12[.x] * 3,
data_muffins[[i]]$ingredients$measure[.x] == "teaspoon" ~ data_muffins[[i]]$ingredients$value12[.x],
data_muffins[[i]]$ingredients$measure[.x] %>% is.character() ~ data_muffins[[i]]$ingredients$value12[.x]
)
)
# Create a single rating score
data_muffins[[i]]$score <- list(
rating = sum(
map_dbl(c(1:5),~ data_muffins[[i]]$ratings$rank[.x] * data_muffins[[i]]$ratings$votes[.x])
) / sum(data_muffins[[i]]$ratings$votes),
# Create a value of number of votes
votes = sum(data_muffins[[i]]$ratings$votes)
)
# Stats for baking
data_muffins[[i]]$bakeMethod <- list(
temperature = data_muffins[[i]]$instructions %>% str_extract("[0-9]+[\\s]+degrees[\\s]+F") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract("[0-9]+") %>%
as.character() %>%
as.numeric(),
bakeTime = data_muffins[[i]]$instructions %>% str_extract("[Bb]ake[^\\.]+[0-9\\-\\s]+[\\s]+minutes|[Bb]ake[^\\.][0-9]+[\\s]+to[\\s]+[0-9]+[\\s]+minutes") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract_all("[0-9]+\\s")
)
}
data_muffins[[234]]
str_extract_all("hello 99 to 99","[0-9]+")
str_extract_all("hello to 99","[0-9]+")
str_extract_all("hello to 99","[0-9]+") %>% extract291
str_extract_all("hello to 99","[0-9]+") %>% extract2(1)
str_extract_all("hello 99 to 99","[0-9]+") %>% extract2(1)
str_extract_all("hello 99 to 99","[0-9]+") %>% extract2(1) %>% as.character()
str_extract_all("hello 99 to 99","[0-9]+") %>% extract2(1) %>% as.character() %>% as.numeric()
str_extract("hello 99","[0-9]+")
# Sort out non-muffin recipes, including cupcakes and English muffin recipes
flours <- "flour|Flour|muffin mix|cake mix|Cake Mix|baking mix|Baking Mix|quinoa|dough|panettone|meal"
data_muffins <- data[map_lgl(data,~any(str_detect(.x$ingredients$ingredient,flours)))]
data_muffins <- data_muffins[map_lgl(data_muffins,~!str_detect(.x$title,"[:print:]+[Ee]nglish[:print:]+|[Ee]nglish[:print:]+|[:print:]+[Ee]nglish|Crumpet|Crumpet|Yorkshire Pudding"))]
data_muffins <- data_muffins[!map_lgl(data_muffins,~str_detect(.x$title,"cake|Cake") & !str_detect(.x$title,"muffin|Muffin"))]
for (i in c(1:length(data_muffins))){
# Scale all ingredients to 12 muffins
data_muffins[[i]]$ingredients$value12 <-
data_muffins[[i]]$ingredients$value * (12 / data_muffins[[i]]$servingSize)
# Scale ingredients (as best possible) to teaspoons
data_muffins[[i]]$ingredients$value12Tsp <-
map_dbl(c(1:nrow(data_muffins[[i]]$ingredients)),~
case_when(
data_muffins[[i]]$ingredients$measure[.x] == "cup" ~ data_muffins[[i]]$ingredients$value12[.x] * 49,
data_muffins[[i]]$ingredients$measure[.x] == "tablespoon" ~ data_muffins[[i]]$ingredients$value12[.x] * 3,
data_muffins[[i]]$ingredients$measure[.x] == "teaspoon" ~ data_muffins[[i]]$ingredients$value12[.x],
data_muffins[[i]]$ingredients$measure[.x] %>% is.character() ~ data_muffins[[i]]$ingredients$value12[.x]
)
)
# Create a single rating score
data_muffins[[i]]$score <- list(
rating = sum(
map_dbl(c(1:5),~ data_muffins[[i]]$ratings$rank[.x] * data_muffins[[i]]$ratings$votes[.x])
) / sum(data_muffins[[i]]$ratings$votes),
# Create a value of number of votes
votes = sum(data_muffins[[i]]$ratings$votes)
)
# Stats for baking
data_muffins[[i]]$bakeMethod <- list(
temperature = data_muffins[[i]]$instructions %>% str_extract("[0-9]+[\\s]+degrees[\\s]+F") %>%
na.omit() %>%
{extract(.,length(.))} %>%
str_extract("[0-9]+") %>%
as.character() %>%
as.numeric(),
bakeTime = data_muffins[[i]]$instructions %>% str_extract("[Bb]ake[^\\.]+[0-9\\-\\s]+[\\s]+minutes|[Bb]ake[^\\.][0-9]+[\\s]+to[\\s]+[0-9]+[\\s]+minutes") %>%
na.omit() %>%
{extract(.,length(.))} %>% {
if_else(
str_detect(.,"[0-9]+[\\s]+to[\\s]+[0-9]+"),
str_extract_all(.,"[0-9]+[\\s]+to[\\s]+[0-9]+") %>%
extract2(1) %>%
as.character() %>%
as.numeric() %>% {
list(
time = (.[1] + .[2]) / 2,
lowerBound = .[1],
upperBound = .[2]
)
},
str_extract(.,"[0-9]+") %>%
as.character() %>%
as.numeric() %>% {
list(
time = .,
lowerBound = NA_integer_,
upperBound = NA_integer_
)
}
)
}
)
}
